// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/totherme/grufflo/backend"
	"github.com/totherme/grufflo/types"
)

type FakeCompiler struct {
	CompileStub        func(gf *types.GinkgoFile, filePath string) error
	compileMutex       sync.RWMutex
	compileArgsForCall []struct {
		gf       *types.GinkgoFile
		filePath string
	}
	compileReturns struct {
		result1 error
	}
}

func (fake *FakeCompiler) Compile(gf *types.GinkgoFile, filePath string) error {
	fake.compileMutex.Lock()
	fake.compileArgsForCall = append(fake.compileArgsForCall, struct {
		gf       *types.GinkgoFile
		filePath string
	}{gf, filePath})
	fake.compileMutex.Unlock()
	if fake.CompileStub != nil {
		return fake.CompileStub(gf, filePath)
	} else {
		return fake.compileReturns.result1
	}
}

func (fake *FakeCompiler) CompileCallCount() int {
	fake.compileMutex.RLock()
	defer fake.compileMutex.RUnlock()
	return len(fake.compileArgsForCall)
}

func (fake *FakeCompiler) CompileArgsForCall(i int) (*types.GinkgoFile, string) {
	fake.compileMutex.RLock()
	defer fake.compileMutex.RUnlock()
	return fake.compileArgsForCall[i].gf, fake.compileArgsForCall[i].filePath
}

func (fake *FakeCompiler) CompileReturns(result1 error) {
	fake.CompileStub = nil
	fake.compileReturns = struct {
		result1 error
	}{result1}
}

var _ backend.Compiler = new(FakeCompiler)
